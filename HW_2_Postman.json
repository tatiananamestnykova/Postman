{
	"info": {
		"_postman_id": "5780642c-f98a-4eeb-8a83-981cbd030210",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос (метод GET)\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS Status code is 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"    });\r",
							"// PASS Body matches string\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first?name={{name}}&age=41&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "41"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос (метод POST)\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS Status code is 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" var Data = pm.response.json()\r",
							"//  Вывести в консоль:\r",
							" console.log('Data=', Data)\r",
							"// Data={age: \"41\", family: {…}, name: \"Evgeniy\"…}\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check_name\", function () {\r",
							"    pm.expect(Data.name).to.eql(\"Evgeniy\");\r",
							"});\r",
							"// PASS Check_name \r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"pm.expect(Data.age).to.eql(\"41\");\r",
							"});\r",
							"// PASS Check_age\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check_salary\", function () {\r",
							"pm.expect(Data.salary).to.eql(700);\r",
							"});\r",
							"// PASS Check_salary\r",
							"\r",
							"// 7. Спарсить request (метод POST).\r",
							"var req = request.data\r",
							"// Вывести в консоль:\r",
							"console.log(\"req=\", req)\r",
							" // req= {name: \"Evgeniy\", age: \"41\", salary: \"700\"}\r",
							"\r",
							"//  8. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function () {\r",
							"pm.expect(Data.name).to.eql(req.name);\r",
							"});\r",
							"// PASS Check name\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"pm.expect(Data.age).to.eql(req.age);\r",
							"});\r",
							"// PASS Check age\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"pm.expect(Data.salary).to.eql(+req.salary);\r",
							"});\r",
							"// PASS Check salary\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"var resp_family = Data.family\r",
							"console.log('resp_family=', resp_family)\r",
							"// resp_family={children: [2], u_salary_1_5_year: 2800}\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year is salary*4\", function () {\r",
							"pm.expect(Data.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							"// PASS Check u_salary_1_5_year is salary*4\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Evgeniy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "41",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос (Метод GET).\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS Status code is 200\r",
							"\r",
							" // 3. Спарсить response body в json.\r",
							" var resp_object = pm.response.json();\r",
							"//  Вывести в консоль:\r",
							" console.log('resp_object=', resp_object)\r",
							"// resp_object={age: \"32\", family: {…}, name: \"Vadim\"…}\r",
							"    \r",
							"// 4. Спарсить request.\r",
							" var req = pm.request.url.query.toObject()\r",
							"//  Вывести в консоль:\r",
							" console.log('req=', req)\r",
							"// req ={name: \"Vadim\", age: \"32\", salary: \"2000\"}\r",
							"\r",
							"// // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check_name\", function () {\r",
							"pm.expect(resp_object.name).to.eql(req.name);\r",
							"});\r",
							"// PASS Check_name\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check_age\", function () {\r",
							"pm.expect(resp_object.age).to.eql(req.age);\r",
							"});\r",
							"// PASS Check_age\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check_salary\", function () {\r",
							"pm.expect(resp_object.salary).to.eql(+req.salary);\r",
							"});\r",
							"// PASS Check_salary\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"var resp_family = resp_object.family\r",
							"console.log('resp_family=', resp_family)\r",
							"// resp_family={children: [2], pets: {…}, u_salary_1_5_year: 8000}\r",
							"\r",
							" var resp_family_0 = resp_object.family.children[0]\r",
							"console.log('resp_family_0=', resp_family_0)\r",
							"// resp_family_0=(2) [\"Alex\", 24]\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check dog has name\", function () {\r",
							"pm.expect(resp_family.pets.dog).to.have.property('name');\r",
							"});\r",
							"// PASS Check dog has name\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog has age\", function () {\r",
							"pm.expect(resp_family.pets.dog).to.have.property('age');\r",
							"});\r",
							"// PASS Check dog has age\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check_name_dog\", function () {\r",
							"pm.expect(resp_object.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//  PASS Check_name_dog\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check_age_dog\", function () {\r",
							"pm.expect(resp_object.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"// PASS Check_age_dog"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vadim&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос(методом GET)\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS Status code is 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"    var resp_info_4 = pm.response.json();\r",
							"    console.log('resp_info_4=', resp_info_4)\r",
							"    // info_4={age: 35, name: \"Katya\", salary: [3]}\r",
							"   \r",
							"// 4. Спарсить request.\r",
							"var req_info_4 = pm.request.url.query.toObject()\r",
							"console.log('req_info_4=', req_info_4)\r",
							"// req_info_4={name: \"Katya\", age: \"35\", salary: \"700\"}\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name respons s request\", function () {\r",
							"pm.expect(resp_info_4.name).to.eql(req_info_4.name);\r",
							"});\r",
							"// PASS Check name respons s request\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check age response s request\", function () {\r",
							"pm.expect(resp_info_4.age).to.eql(+req_info_4.age);\r",
							"});\r",
							"//  PASS Check age response s request\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"var req_info_4_salary = req_info_4.salary\r",
							"console.log('req_info_4_salary=', req_info_4_salary)\r",
							"// req_info_4_salary=700\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"var resp_salary = resp_info_4.salary\r",
							"console.log('resp_salary=', resp_salary)\r",
							"// resp_salary=(3) [700, \"1400\", \"2100\"]\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"var resp_salary_0 = resp_info_4.salary[0]\r",
							"console.log('resp_salary_0=', resp_salary_0)\r",
							"// resp_salary_0=700\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"var resp_salary_1 = resp_info_4.salary[1]\r",
							"console.log('resp_salary_1=', resp_salary_1)\r",
							"// resp_salary_1=\"1400\"\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"var resp_salary_2 = resp_info_4.salary[2]\r",
							"console.log('resp_salary_2=', resp_salary_2)\r",
							"// resp_salary_2=\"2100\"\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_0\", function () {\r",
							"pm.expect(resp_salary_0).to.eql(+req_info_4.salary);\r",
							"});\r",
							"// PASS Check salary_0\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_salary_1\", function () {\r",
							"pm.expect(+resp_salary_1).to.eql(req_info_4.salary*2);\r",
							"});\r",
							"// PASS Check_salary_1\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_2\", function () {\r",
							"pm.expect(+resp_salary_2).to.eql(req_info_4.salary*3);\r",
							"});\r",
							"// PASS Check_salary_2\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp_info_4.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp_info_4.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp_info_4.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку \r",
							"// элементы списка из параметра salary.\r",
							"console.log('length_salary =', resp_info_4.salary.length)\r",
							"// length_salary =3\r",
							"\r",
							"for (let cicl = 0; cicl < resp_info_4.salary.length; cicl++) {\r",
							"console.log('item_salary=', resp_info_4.salary[cicl]);\r",
							"};\r",
							"//  item_salary=700\r",
							"//  item_salary=1400\r",
							"//  item_salary=2100"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Katya&age=35&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Katya"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// {{salary}}\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// {{age}}\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// {{name}}\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS Status code is 200\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"    var resp_user_2 = pm.response.json();\r",
							"    console.log('resp_user_2=', resp_user_2)\r",
							"// resp_user_2=={person: {…}, qa_salary_after_1.5_year: 2310, qa_salary_after_12_months: 1890.0000000000002…}\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var req_user_2 = pm.request.url.query.toObject();\r",
							"console.log('req_user_2=', req_user_2)\r",
							"// req_user_2={name: \"Katya\", age: \"35\", salary: \"700\"}\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check response has start_qa_salary\", function () {\r",
							"pm.expect(resp_user_2).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// PASS Check response has start_qa_salary\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check response has qa_salary_after_6_months\", function () {\r",
							"pm.expect(resp_user_2).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// PASS Check response has qa_salary_after_6_months\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check response has qa_salary_after_12_months\", function () {\r",
							"pm.expect(resp_user_2).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// PASS Check response has qa_salary_after_12_months\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check response has qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(resp_user_2).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// PASS Check response has qa_salary_after_1.5_year\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check response has qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(resp_user_2).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// PASS Check response has qa_salary_after_3.5_years\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check response has person\", function () {\r",
							"pm.expect(resp_user_2).to.have.property(\"person\");\r",
							"});\r",
							"// PASS Check response has person\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary equals salary s request\", function () {\r",
							"pm.expect(resp_user_2.start_qa_salary).to.eql(+req_user_2.salary);\r",
							"});\r",
							"// PASS Check start_qa_salary equals salary s request\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							" pm.test(\"Check qa_salary_after_6_months equals salary*2 s request\", function () {\r",
							" pm.expect(resp_user_2.qa_salary_after_6_months).to.eql(2*req_user_2.salary);\r",
							"  });\r",
							"// PASS Check qa_salary_after_6_months equals salary*2 s request\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"var req_salary = parseFloat(req_user_2.salary)\r",
							"console.log('req_salary=', req_salary)\r",
							"\r",
							"pm.test(\"Check qa_salary_after_12_months equals salary*2.7 s request\", function () {\r",
							"pm.expect(parseFloat(resp_user_2.qa_salary_after_12_months)).to.eql(2.7*req_salary);\r",
							"  });\r",
							"// PASS Check qa_salary_after_12_months equals salary*2.7 s request\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"var sel = resp_user_2['qa_salary_after_1.5_year'];\r",
							"pm.test(\"Check qa_salary_after_1.5_year equals salary*3.3 s request\", function() {\r",
							"pm.expect(sel).to.eql(req_salary*3.3);\r",
							"  });\r",
							"//   PASS Check qa_salary_after_1.5_year equals salary*3.3 s request\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"var sl_1 = resp_user_2['qa_salary_after_3.5_years'];\r",
							"pm.test(\"Check qa_salary_after_3.5_years equals salary*3.8\", function () {\r",
							"        pm.expect(sl_1).to.eql(req_salary*3.8);\r",
							"});\r",
							"// PASS Check qa_salary_after_3.5_years equals salary*3.8\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check in person u_name_1 equals salary with request\", function () {\r",
							"pm.expect(resp_user_2.person.u_name[1]).to.eql(+req_salary);\r",
							" });\r",
							"//  PASS Check in person u_name_1 equals salary with request\r",
							"console.log('resp_user_2.person.u_name[1]=', resp_user_2.person.u_name[1])\r",
							"// resp_user_2.person.u_name[1]=700\r",
							"\r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age equls age wish request\", function () {\r",
							"pm.expect(resp_user_2.person.u_age).to.eql(+req_user_2.age);\r",
							"});\r",
							"// PASS Check u_age equls age wish request\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(resp_user_2.person.u_salary_5_years).to.eql(+req_salary*4.2);\r",
							"});\r",
							"//  PASS Check u_salary_5_years равен salary*4.2 из request\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (var k in resp_user_2.person) {\r",
							"console.log(k+ '=' +resp_user_2.person[k]);\r",
							" };\r",
							"// u_age=35\r",
							"// u_name=Katya,700,35\r",
							"// u_salary_5_years=2940"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}